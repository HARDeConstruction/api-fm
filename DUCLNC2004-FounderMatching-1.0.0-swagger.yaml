openapi: 3.0.0
info:
  title: founder-matching-api
  version: "1.0.0"
  description: The API for the FounderMatching project by HarDeconstruction

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DUCLNC2004/FounderMatching/1.0.0

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Enums
    GenderType:
      type: string
      enum:
        - male
        - female
        - other

    PrivacyType:
      type: string
      enum:
        - public
        - private
        - connections

    MatchStatus:
      type: string
      enum:
        - pending
        - accepted
        - rejected

    # Tables
    UserAccount:
      type: object
      additionalProperties: false
      properties:
        UserID:
          type: integer
          format: int32
          minimum: 1
          maximum: 999999
        ClerkUserID:
          type: string
          format: uuid
        Email:
          type: string
          format: email
          maxLength: 255
          pattern: "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$"
        FirstName:
          type: string
          maxLength: 100
          pattern: "^[A-Za-z\\s'-]+$"
        LastName:
          type: string
          maxLength: 100
          pattern: "^[A-Za-z\\s'-]+$"
        IsCandidate:
          type: boolean
        IsStartup:
          type: boolean


    CandidateProfile:
      type: object
      additionalProperties: false
      properties:
        CandidateID:
          type: integer
          format: int32
          minimum: 1
          maximum: 999999
        UserID:
          type: integer
          format: int32
          minimum: 1
        Industry:
          type: string
          maxLength: 100
          pattern: "^[A-Za-z\\s&,-]+$"
        PhoneNumberID:
          type: integer
          format: int32
          minimum: 1
        CountryID:
          type: integer
          format: int32
          minimum: 1
        City:
          type: string
          maxLength: 100
          pattern: "^[A-Za-z\\s'-]+$"
        University:
          type: string
          maxLength: 100
          pattern: "^[A-Za-z0-9\\s',.-]+$"
        LinkedInURL:
          type: string
          format: url
          maxLength: 255
        Slogan:
          type: string
          maxLength: 200
        HobbyInterest:
          type: string
          maxLength: 500
        Gender:
          $ref: '#/components/schemas/GenderType'


    CandidateProfilePrivacySettings:
      type: object
      additionalProperties: false
      properties:
        CandidateID:
          type: integer
          format: int32
          minimum: 1

        IndustryPrivacy:
          $ref: '#/components/schemas/PrivacyType'
        CityPrivacy:
          $ref: '#/components/schemas/PrivacyType'
        UniversityPrivacy:
          $ref: '#/components/schemas/PrivacyType'
        LinkedInURLPrivacy:
          $ref: '#/components/schemas/PrivacyType'
        SloganPrivacy:
          $ref: '#/components/schemas/PrivacyType'

    StartupProfile:
      type: object
      additionalProperties: false
      properties:
        StartupID:
          type: integer
          minimum: 1
          maximum: 999999
        UserOwnerID:
          type: integer
          minimum: 1
        Name:
          type: string
          maxLength: 100
          pattern: "^[A-Za-z\\s&,-]+$"
        Email:
          type: string
          format: email
        Logo:
          type: string
        Industry:
          type: string
          maxLength: 100
          pattern: "^[A-Za-z\\s&,-]+$"
        LinkedInURL:
          type: string
          format: uri
        Slogan:
          type: string
          maxLength: 200
        Description:
          type: string
          maxLength: 1000

    StartupProfilePrivacySettings:
      type: object
      additionalProperties: false
      properties:
        StartupID:
          type: integer
          format: int32
          minimum: 1
        IndustryPrivacy:
          $ref: '#/components/schemas/PrivacyType'
        SloganPrivacy:
          $ref: '#/components/schemas/PrivacyType'

    Notification:
      type: object
      additionalProperties: false
      properties:
        ID:
          type: integer
          format: int32
          minimum: 1
          maximum: 999999
        Recipient:
          type: integer
          format: int32
          minimum: 1
          maximum: 999999
        Data:
          type: string
          maxLength: 500
        Read:
          type: boolean
        CreatedDateTime:
          type: string
          format: date-time

paths:
  /users/me:
    get:
      tags:
        - Profile
      summary: Get the current user's profile
      description: Fetch the profile details of the logged-in user, including basic and candidate-specific information.
      operationId: getUserProfile
      responses:
        '200':
          description: User profile details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserAccount:
                    $ref: '#/components/schemas/UserAccount'
                  CandidateProfile:
                    $ref: '#/components/schemas/CandidateProfile'
                  PrivacySettings:
                    $ref: '#/components/schemas/CandidateProfilePrivacySettings'
        '404':
          description: Profile not found

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"

    post:
      tags:
        - Profile
      summary: Create a new user profile
      description: Create a profile for the logged-in user.
      operationId: createUserProfile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                UserAccount:
                  $ref: '#/components/schemas/UserAccount'
                CandidateProfile:
                  $ref: '#/components/schemas/CandidateProfile'
                PrivacySettings:
                  $ref: '#/components/schemas/CandidateProfilePrivacySettings'
      responses:
        '200':
          description: Profile created successfully.
        '404':
          description: Profile creation failed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"

    patch:
      tags:
        - Profile
      summary: Update the current user's profile
      description: Update profile information for the logged-in user.
      operationId: updateUserProfile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                UserAccount:
                  $ref: '#/components/schemas/UserAccount'
                CandidateProfile:
                  $ref: '#/components/schemas/CandidateProfile'
                PrivacySettings:
                  $ref: '#/components/schemas/CandidateProfilePrivacySettings'
      responses:
        '200':
          description: Profile updated successfully.
        '404':
          description: Profile not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get all notifications for the current user
      description: Fetch all notifications for the logged-in user.
      operationId: getNotifications
      responses:
        '200':
          description: Notifications fetched successfully.
          content:
            application/json:
              schema:
                type: array
                maxItems: 50
                items:
                  $ref: '#/components/schemas/Notification'
        '404':
          description: Notifications not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"

  /notifications/{id}:
    patch:
      tags:
        - Notifications
      summary: Mark a notification as read
      description: Update the read status of a specific notification by ID.
      operationId: markNotificationAsRead
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Read:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Notification updated successfully.
        '404':
          description: Notification not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"
